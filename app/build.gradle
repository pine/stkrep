plugins {
    id 'org.springframework.boot'
}

def properties = new Properties()
def secrets = rootProject.file("credentials/secrets.properties")
if (secrets.exists()) {
    properties.load(secrets.newDataInputStream())
}

bootRun {
    systemProperties = properties
}

test {
    systemProperties = properties
}

dependencies {
    // Sub-projects
    implementation project(':lib-sheets')
    implementation project(':lib-kabuyoho')
    implementation project(':lib-report')
    implementation project(':lib-ua')

    // Spring Framework
    implementation 'org.springframework.boot:spring-boot-starter-jetty'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.retry:spring-retry'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Jasypt
    implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter'

    // Apache Commons
    implementation 'commons-io:commons-io'
    implementation 'org.apache.commons:commons-collections4'
    implementation 'org.apache.commons:commons-lang3'

    // Utilities
    implementation 'com.google.guava:guava'
    implementation 'com.github.maricn:logback-slack-appender'

    // My Utilities
    implementation 'moe.pine:spring-cache-interceptors'
}
