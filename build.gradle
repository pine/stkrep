buildscript {
    ext {
        springBootVersion = '2.6.1'
        spotbugsVersion = '4.4.2'
    }
    repositories {
        mavenCentral()
        gradlePluginPortal()
        maven { url 'https://repo.spring.io/milestone' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
        classpath 'com.github.spotbugs.snom:spotbugs-gradle-plugin:4.7.8'
        classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.0'
    }
}


apply plugin: 'java'

configure(subprojects.findAll { relativePath(it.projectDir).startsWith('app') }) {
    apply plugin: 'java'
}

configure(subprojects.findAll { relativePath(it.projectDir).startsWith('lib-') }) {
    apply plugin: 'java-library'
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'

    group 'moe.pine.stkrep'

    repositories {
        mavenCentral()
        maven { url 'https://repo.spring.io/milestone' }
    }

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-Xlint:unchecked'
        options.compilerArgs << '-Xlint:deprecation'
    }

    configurations {
        implementation.exclude module: 'spring-boot-starter-tomcat'
    }
    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom 'com.google.auth:google-auth-library-bom:1.2.1'
        }
        dependencies {
            // GCP
            dependency 'com.google.api-client:google-api-client:1.30.4'
            dependency 'com.google.oauth-client:google-oauth-client-jetty:1.30.6'
            dependency 'com.google.apis:google-api-services-sheets:v4-rev581-1.25.0'

            // Jsoup
            dependency 'org.jsoup:jsoup:1.14.3'

            // Guava
            dependency 'com.google.guava:guava:27.0.1-jre'

            // Apache Commons
            dependency 'org.apache.commons:commons-lang3:3.8.1'
            dependency 'org.apache.commons:commons-collections4:4.3'
            dependency 'org.apache.commons:commons-math3:3.6.1'

            // Spotbugs
            dependency "com.github.spotbugs:spotbugs-annotations:$spotbugsVersion"

            // Utilities
            dependency 'com.github.maricn:logback-slack-appender:1.4.0'

            // My Utilities
            dependency 'moe.pine:heroku-addons:0.3.3'
            dependency 'moe.pine:spring-cache-interceptors:0.2.0'
            dependency 'moe.pine:reactor-interruptible:0.1.1'
        }
    }
    
    dependencies {
        // Lombok
        annotationProcessor 'org.projectlombok:lombok'
        compileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
        testCompileOnly 'org.projectlombok:lombok'

        // Annotations
        compileOnly 'net.jcip:jcip-annotations:1.0'
        compileOnly 'com.github.spotbugs:spotbugs-annotations'
    }

    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion '2.16.0'
            }
        }
    }


    // ----- JUnit ------------------------------------

    test {
        useJUnitPlatform()
    }


    // ----- JaCoCo -----------------------------------

    apply plugin: 'jacoco'

    jacoco {
        toolVersion = '0.8.7'
    }


    // ----- SpotBugs -------------------------------------

    apply plugin: 'com.github.spotbugs'

    spotbugs {
        toolVersion = spotbugsVersion
        excludeFilter = file("${project.rootDir}/config/findbugs-exclude.xml")
    }
    spotbugsMain {
        reports {
            xml.required = false
            html.required = true
        }
    }
    spotbugsTest {
        enabled = false
    }


    // ----- PMD ----------------------------------------------

    apply plugin: 'pmd'

    pmd {
        toolVersion = '6.40.0'
        consoleOutput = true
        ruleSetFiles = rootProject.files("config/pmd-ruleset.xml")
        ruleSets = []
    }
    pmdMain {
        enabled = true
    }
    pmdTest {
        enabled = false
    }
}


// ----- Build Time Tracker -------------------------------

apply plugin: 'build-time-tracker'

buildtimetracker {
    reporters {
        summary {
            ordered true
            barstyle 'ascii'
        }
    }
}


// ----- JaCoCo -------------------------------------------

task jacocoMerge(type: JacocoMerge) {
    dependsOn(subprojects.jacocoTestReport.dependsOn)
    mustRunAfter(subprojects.jacocoTestReport.mustRunAfter)
    destinationFile = file("${buildDir}/jacoco/test.exec")
    executionData = files(subprojects.jacocoTestReport.executionData)
            .filter { f -> f.exists() }
}

jacocoTestReport {
    dependsOn(jacocoMerge)
    reports {
        xml.required = true
        html.required = true
    }

    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom files(subprojects.sourceSets.main.output)
}


// ----- Configuration ------------------------------------

def confFiles = fileTree('credentials').include('**/*.json', '**/*.xml', '**/*.yml')
confFiles.forEach { File src ->
    def credentialsPath = "${rootDir.absolutePath}/credentials" as String
    def dest = new File(src.absolutePath.replace(credentialsPath, rootDir.absolutePath))
    dest.parentFile.mkdirs()
    dest.createNewFile()
    dest.setBytes([] as byte[])

    if (src.name.endsWith('.yml')) {
        dest.write("# This YAML source file was generated by the Gradle.\n\n")
    }
    dest.append(src.readBytes())
}
